---
interface Props {
  imageSlug: string;
}

const { imageSlug } = Astro.props;
---

<div id="scene-container" data-image-slug={imageSlug} transition:persist>
  <canvas id="three-canvas"></canvas>
</div>

<script>
  import * as THREE from "three";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

  let scene, camera, renderer, model;

  function initThreeJS() {
    const sceneContainer = document.getElementById("scene-container");
    const canvas = document.getElementById("three-canvas");

    // If elements don't exist, exit gracefully
    if (!sceneContainer || !canvas) return;

    const imageSlug = sceneContainer.dataset.imageSlug;

    // Clear existing scene if it exists
    if (scene) {
      scene.clear();
      renderer.dispose();
    }

    // Set up scene
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setClearColor(0x333333, 0);

    // Position camera
    camera.position.set(0, -100, 100);
    camera.lookAt(0, 0, 0);

    // Create a texture loader
    const textureLoader = new THREE.TextureLoader();

    // Load the model
    const loader = new GLTFLoader();
    loader.load(
      "/models/test-08.glb",
      (gltf) => {
        model = gltf.scene;
        scene.add(model);

        // Apply textures and materials
        applyTextures(imageSlug);

        // Initial size update and start animation
        updateSizes();
        animate();
      },
      undefined,
      (error) => {
        console.error("An error occurred while loading the model:", error);
      }
    );

    // Add lights to the scene
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.95);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.95);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    const pointLight = new THREE.PointLight(0xffffff, 0.85);
    pointLight.position.set(-5, -5, -5);
    scene.add(pointLight);

    // Handle window resizing
    function updateSizes() {
      const width = sceneContainer.clientWidth;
      const height = sceneContainer.clientHeight;
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
      renderer.setSize(width, height);
    }

    // Handle scrolling
    function handleScroll() {
      const scrollPercentage =
        window.scrollY /
        (document.documentElement.scrollHeight - window.innerHeight);
      const rotationAngle = (scrollPercentage * Math.PI) / 6;
      if (scene) scene.rotation.x = -rotationAngle;
    }

    // Render loop
    function animate() {
      if (scene && camera && renderer) {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      }
    }

    // Event listeners
    window.addEventListener("resize", updateSizes);
    window.addEventListener("scroll", handleScroll);

    // Clean up function
    return () => {
      window.removeEventListener("resize", updateSizes);
      window.removeEventListener("scroll", handleScroll);
      if (renderer) renderer.dispose();
      if (scene) scene.clear();
    };
  }

  function applyTextures(imageSlug) {
    if (!model) return;

    const textureLoader = new THREE.TextureLoader();
    model.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        if (!(child.material instanceof THREE.MeshStandardMaterial)) {
          child.material = new THREE.MeshStandardMaterial({
            color: child.material.color,
            name: child.material.name,
          });
        }

        if (child.material.name === "screen" && imageSlug) {
          textureLoader.load(`/images/${imageSlug}`, (texture) => {
            texture.flipY = false;
            child.material.map = texture;
            child.material.needsUpdate = true;
          });
        }
      }
    });
  }

  // Initialize Three.js scene
  let cleanup = initThreeJS();

  // Re-initialize on view transitions
  document.addEventListener("astro:after-swap", () => {
    if (cleanup) cleanup();
    cleanup = initThreeJS();
  });

  // Update textures when the image slug changes
  document.addEventListener("astro:page-load", () => {
    const sceneContainer = document.getElementById("scene-container");
    if (sceneContainer) {
      const newImageSlug = sceneContainer.dataset.imageSlug;
      applyTextures(newImageSlug);
    }
  });

  // Clean up on page unload
  window.addEventListener("unload", () => {
    if (cleanup) cleanup();
  });
</script>

<style>
  #scene-container {
    width: 100%;
    height: 80vh;
  }
  #three-canvas {
    width: 100%;
    height: 100%;
  }
</style>
