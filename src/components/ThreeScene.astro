---
interface Props {
  imageSlug: string;
  cameraPosition?: { x: number; y: number; z: number };
}

const { imageSlug, cameraPosition = { x: 0, y: -100, z: 100 } } = Astro.props;
---

<div
  id="scene-container"
  transition:name="foo"
  data-image-slug={imageSlug}
  data-camera-position={JSON.stringify(cameraPosition)}
>
  <canvas id="three-canvas"></canvas>
</div>

<script>
  import * as THREE from "three";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

  let scene, camera, renderer, model;

  function initThreeJS() {
    const sceneContainer = document.getElementById("scene-container");
    const canvas = document.getElementById("three-canvas");

    if (!sceneContainer || !canvas) return;

    const imageSlug = sceneContainer.dataset.imageSlug;
    const cameraPosition = JSON.parse(
      sceneContainer.dataset.cameraPosition || '{"x": 0, "y": -100, "z": 100}'
    );

    // Set up scene
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
    renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setClearColor(0x333333, 0);

    // Position camera
    camera.position.set(cameraPosition.x, cameraPosition.y, cameraPosition.z);
    camera.lookAt(0, 0, 0);

    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.95);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.95);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    // Load the model
    const loader = new GLTFLoader();
    loader.load(
      "/models/test-08.glb",
      (gltf) => {
        model = gltf.scene;
        scene.add(model);
        applyTextures(imageSlug);
        updateSizes();
        animate();
      },
      undefined,
      (error) => {
        console.error("An error occurred while loading the model:", error);
      }
    );
  }

  function applyTextures(imageSlug) {
    if (!model) return;

    const textureLoader = new THREE.TextureLoader();
    model.traverse((child) => {
      if (child instanceof THREE.Mesh) {
        if (child.material.name === "screen" && imageSlug) {
          textureLoader.load(`/images/${imageSlug}`, (texture) => {
            texture.flipY = false;
            child.material.map = texture;
            child.material.needsUpdate = true;
          });
        }
      }
    });
  }

  function updateSizes() {
    const sceneContainer = document.getElementById("scene-container");
    if (!sceneContainer) return;

    const width = sceneContainer.clientWidth;
    const height = sceneContainer.clientHeight;
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  }

  function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  }

  // Initialize Three.js scene
  initThreeJS();

  // Update on page load and after view transitions
  document.addEventListener("astro:page-load", initThreeJS);

  // Handle window resizing
  window.addEventListener("resize", updateSizes);

  // Clean up on page unload
  window.addEventListener("unload", () => {
    window.removeEventListener("resize", updateSizes);
    if (renderer) renderer.dispose();
    if (scene) scene.clear();
  });
</script>

<style>
  #scene-container {
    width: 100%;
    height: 80vh;
  }
  #three-canvas {
    width: 100%;
    height: 100%;
  }
</style>
