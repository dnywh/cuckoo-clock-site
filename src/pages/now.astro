---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";

import { getCurrentSeasonAndTime } from "../utils/timeUtils";
import { getMergedBirdData } from "../utils/birdDataMerger";

const { season, time } = getCurrentSeasonAndTime();
const mergedBirdData = getMergedBirdData();

let currentBird = null;
let latestActiveTime = -1; // Initialize to start of day in minutes
let debugInfo = [];

function timeToMinutes(timeStr) {
  const [hours, minutes] = timeStr.split(":").map(Number);
  return hours * 60 + minutes;
}

const currentTimeMinutes = timeToMinutes(time);

for (const [slug, bird] of Object.entries(mergedBirdData)) {
  debugInfo.push(`Checking ${slug}:`);
  if (bird.seasons && bird.seasons[season]) {
    const birdTime = bird.seasons[season][0];
    const birdTimeMinutes = timeToMinutes(birdTime);
    debugInfo.push(
      `  Season: ${season}, Bird Time: ${birdTime} (${birdTimeMinutes} minutes)`
    );
    if (
      birdTimeMinutes <= currentTimeMinutes &&
      birdTimeMinutes > latestActiveTime
    ) {
      currentBird = slug;
      latestActiveTime = birdTimeMinutes;
      debugInfo.push(`  Current bird updated to: ${slug}`);
    } else {
      debugInfo.push(
        `  Not updated. Current time: ${time} (${currentTimeMinutes} minutes), Latest active time: ${latestActiveTime} minutes`
      );
    }
  } else {
    debugInfo.push(`  No data for current season (${season})`);
  }
}

debugInfo.push(`Final current bird: ${currentBird}`);

if (currentBird) {
  debugInfo.push(`Redirecting to /birds/${currentBird}`);
  return Astro.redirect(`/birds/${currentBird}`);
}
---

<Layout title="Now">
  <main>
    <h1>No bird currently in session</h1>
    <p>Current season: {season}</p>
    <p>Current time: {time}</p>

    <h2>Debug Log:</h2>
    <pre>{debugInfo.join('\n')}</pre>

    <p class="instructions">Here are all the birds:</p>
    <ul role="list" class="link-card-grid">
      {
        Object.entries(mergedBirdData).map(([slug, bird]) => (
          <Card
            href={`/birds/${slug}`}
            title={bird.name}
            body={
              bird.habitat
                ? `Habitat: ${bird.habitat}`
                : "No habitat information available"
            }
          />
        ))
      }
    </ul>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
