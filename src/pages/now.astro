---
// src/pages/now.astro
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import { currentBird } from "../stores/birdTimeStore";
---

<Layout title="Now">
  <main>
    <h1>Now</h1>
    <div id="birdInfo">Loading bird...</div>
    <aside transition:name="hero">
      <Card
        href={`laughing-kookaburra`}
        title="Hello from now.astro"
        body="This is my now page. It's loading."
      />
    </aside>
  </main>
</Layout>

<style>
  #birdInfo {
    margin-top: 20px;
  }
</style>

<script>
  import { navigate } from "astro:transitions/client";
  import { currentBird, currentTime } from "../stores/birdTimeStore";
  import { createSubscriptionManager } from "../utils/subscriptionManager";

  const subscriptionManager = createSubscriptionManager();

  function updateBirdInfo() {
    const birdInfoElement = document.getElementById("birdInfo");
    if (!birdInfoElement) return; // Exit if element not found

    const bird = currentBird.get();

    if (bird) {
      birdInfoElement.innerHTML = `Current bird: ${bird.name}`;
      // Redirect after a short delay
      setTimeout(() => {
        // Use Astro's navigate function to ensure <ViewTransitions /> router listens to this
        navigate(`/birds/${bird.slug}`);
      }, 3000);
    } else {
      // Notify after a short delay
      setTimeout(() => {
        birdInfoElement.textContent =
          "No active bird right now. It's quiet hours.";
      }, 2000);
    }
  }

  function initializePage() {
    subscriptionManager.unsubscribeAll();

    // Set up new listeners
    subscriptionManager.subscribe(currentBird, updateBirdInfo);
    subscriptionManager.subscribe(currentTime, updateBirdInfo);

    // Initial update
    updateBirdInfo();
  }

  // Run initialization when the script loads
  initializePage();

  // Re-run initialization after view transitions
  document.addEventListener("astro:page-load", initializePage);

  // Clean up subscriptions before view transitions
  document.addEventListener(
    "astro:before-preparation",
    subscriptionManager.unsubscribeAll
  );
</script>
